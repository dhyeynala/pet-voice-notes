#!/usr/bin/env python3
"""
PetPulse Setup Script
Helps users configure the project with their own API keys and project details.
"""

import os
import sys
import subprocess
import json
from pathlib import Path


def print_banner():
    print(
        """
╔══════════════════════════════════════════════════════════════╗
║                    🐾 PetPulse Setup                        ║
║                                                              ║
║  AI-Powered Pet Health Management System                    ║
║  Open Source Setup Script                                   ║
╚══════════════════════════════════════════════════════════════╝
    """
    )


def check_python_version():
    """Check if Python version is compatible"""
    if sys.version_info < (3, 8):
        print("Python 3.8 or higher is required")
        sys.exit(1)
    print("Python version check passed")


def create_env_file():
    """Create .env file from template"""
    if os.path.exists('.env'):
        response = input("⚠️  .env file already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("📝 Skipping .env creation")
            return

    print("\n🔧 Setting up environment variables...")

    # Get user inputs
    openai_key = input("Enter your OpenAI API Key: ").strip()
    dog_api_key = input("Enter your Dog API Key (optional): ").strip()
    cat_api_key = input("Enter your Cat API Key (optional): ").strip()
    google_project = input("Enter your Google Cloud Project ID: ").strip()

    # Create .env content
    env_content = f"""# PetPulse Environment Configuration
# Generated by setup script

# OpenAI API Key - Get from https://platform.openai.com/api-keys
OPENAI_API_KEY={openai_key}

# External API Keys for Breed Information (Optional)
DOG_API_KEY={dog_api_key}
CAT_API_KEY={cat_api_key}

# Firebase Configuration
FIREBASE_STORAGE_BUCKET={google_project}.appspot.com
GOOGLE_CLOUD_PROJECT={google_project}

# Google Cloud Service Account - Path to your service account JSON file
GOOGLE_APPLICATION_CREDENTIALS=gcloud-key.json

# Security Notes:
# - Never commit your actual .env file to version control!
# - Keep your API keys secure and rotate them regularly
# - See SECURITY.md for detailed security guidelines
"""

    with open('.env', 'w') as f:
        f.write(env_content)

    print(".env file created successfully")


def create_firebase_config():
    """Create Firebase configuration file"""
    if os.path.exists('public/firebase-config.js') and 'YOUR_FIREBASE_API_KEY' not in open('public/firebase-config.js').read():
        response = input("⚠️  Firebase config already exists. Overwrite? (y/N): ")
        if response.lower() != 'y':
            print("📝 Skipping Firebase config creation")
            return

    print("\n🔥 Setting up Firebase configuration...")

    # Get Firebase details
    firebase_api_key = input("Enter your Firebase Web API Key: ").strip()
    project_id = input("Enter your Firebase Project ID: ").strip()
    messaging_sender_id = input("Enter your Firebase Messaging Sender ID: ").strip()
    app_id = input("Enter your Firebase App ID: ").strip()
    measurement_id = input("Enter your Firebase Measurement ID (optional): ").strip()

    # Create Firebase config
    firebase_config = f"""// Firebase Configuration
// Generated by setup script

import {{ initializeApp }} from "https://www.gstatic.com/firebasejs/10.12.2/firebase-app.js";

const firebaseConfig = {{
  apiKey: "{firebase_api_key}",
  authDomain: "{project_id}.firebaseapp.com",
  databaseURL: "https://{project_id}-default-rtdb.firebaseio.com",
  projectId: "{project_id}",
  storageBucket: "{project_id}.appspot.com",
  messagingSenderId: "{messaging_sender_id}",
  appId: "{app_id}",
  measurementId: "{measurement_id}"
}};

export const app = initializeApp(firebaseConfig);
"""

    with open('public/firebase-config.js', 'w') as f:
        f.write(firebase_config)

    print("Firebase configuration created successfully")


def install_dependencies():
    """Install Python dependencies"""
    print("\n📦 Installing Python dependencies...")
    try:
        subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], check=True)
        print("Dependencies installed successfully")
    except subprocess.CalledProcessError:
        print("Failed to install dependencies")
        print("💡 Try running: pip install -r requirements.txt manually")


def create_google_cloud_instructions():
    """Create instructions for Google Cloud setup"""
    instructions = """
🔑 Google Cloud Setup Instructions:

1. Go to https://console.cloud.google.com/
2. Create a new project or select existing one
3. Enable these APIs:
   - Cloud Speech-to-Text API
   - Firebase API
   - Cloud Storage API
4. Create a service account:
   - Go to IAM & Admin > Service Accounts
   - Click "Create Service Account"
   - Give it a name (e.g., "petpulse-service")
   - Grant these roles:
     - Firebase Admin
     - Cloud Speech-to-Text User
     - Storage Object Admin
5. Create and download the JSON key file
6. Save it as 'gcloud-key.json' in the project root

📁 File structure should look like:
final_github/
├── .env                    (created by this script)
├── gcloud-key.json        (download from Google Cloud)
├── public/
│   └── firebase-config.js (created by this script)
└── ... (other files)
"""

    with open('GOOGLE_CLOUD_SETUP.md', 'w') as f:
        f.write(instructions)

    print("📝 Google Cloud setup instructions saved to GOOGLE_CLOUD_SETUP.md")


def main():
    print_banner()

    print("🚀 Welcome to PetPulse Setup!")
    print("This script will help you configure the project with your own API keys and project details.\n")

    # Check Python version
    check_python_version()

    # Create environment file
    create_env_file()

    # Create Firebase config
    create_firebase_config()

    # Install dependencies
    install_dependencies()

    # Create setup instructions
    create_google_cloud_instructions()

    print("\n" + "=" * 60)
    print("🎉 Setup Complete!")
    print("=" * 60)
    print("\n📋 Next Steps:")
    print("1. Follow the instructions in GOOGLE_CLOUD_SETUP.md")
    print("2. Download your Google Cloud service account key as 'gcloud-key.json'")
    print("3. Run: python api_server.py")
    print("4. Open http://localhost:8000 in your browser")
    print("\n📚 For more help, see README.md and SECURITY.md")
    print("=" * 60)


if __name__ == "__main__":
    main()
